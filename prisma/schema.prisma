generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  username      String?      @unique
  image         String?
  bio           String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  issues        Issue[]
  repositories  Repository[]
  stars         Star[]       @relation("starsTousers")

  @@map("users")
}

model Repository {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  ownerId     Int?     @map("owner_id")
  user        User?    @relation(fields: [ownerId], references: [id])
  issues      Issue[]
  stars       Star[]   @relation("repositoriesTostars")

  @@unique([name, ownerId], name: "repositories_name_owner_id_key")
  @@map("repositories")
}

model Star {
  id           Int         @id @default(autoincrement())
  repositoryId Int?        @map("repository_id")
  userId       Int?        @map("user_id")
  repositories Repository? @relation("repositoriesTostars", fields: [repositoryId], references: [id])
  users        User?       @relation("starsTousers", fields: [userId], references: [id])

  @@unique([repositoryId, userId], name: "stars_repository_id_user_id_key")
  @@map("stars")
}

model Label {
  id          Int     @id @default(autoincrement())
  name        String
  color       String
  description String?
  issues      Issue[]
}

model Issue {
  id           Int         @id @default(autoincrement())
  number       Int?
  title        String
  body         String?
  state        State       @default(open)
  assignee     String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  closedAt     DateTime?   @map("closed_at")
  userId       Int?        @map("user_id")
  repoId       Int?        @map("repo_id")
  repositories Repository? @relation(fields: [repoId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  labels       Label[]

  @@unique([number, repoId], name: "Issue_number_repo_id_key")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "provider_account_id")
  @@index([providerId], name: "provider_id")
  @@index([userId], name: "user_id")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

enum State {
  open
  closed
}
